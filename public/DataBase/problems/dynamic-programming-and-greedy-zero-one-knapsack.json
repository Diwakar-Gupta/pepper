{
  "name": "Zero One Knapsack",
  "slug": "dynamic-programming-and-greedy-zero-one-knapsack",
  "description": "1. You are given a number n, representing the count of items.\n2. You are given n numbers, representing the values of n items.\n3. You are given n numbers, representing the weights of n items.\n3. You are given a number \"cap\", which is the capacity of a bag you've.\n4. You are required to calculate and print the maximum value that can be created in the bag without \n     overflowing it's capacity.\n\nNote -> Each item can be taken 0 or 1 number of times. You are not allowed to put the same item \n               again and again.\n\n### Input Format\n```\nA number n\nv1 v2 .. n number of elements\nw1 w2 .. n number of elements\nA number cap\n```\n\n### Output Format\n```\nA number representing the maximum value that can be created in the bag without overflowing it's capacity\n```\n\n### Constraints\n```\n1 <= n <= 20\n0 <= v1, v2, .. n elements <= 50\n0 < w1, w2, .. n elements <= 10\n0 < cap <= 10\n```\n\n### Sample Input\n```\n5\n15 14 10 45 30\n2 5 1 3 4\n7\n```\n\n### Sample Output\n```\n75\n```",
  "externalPlatforms": [],
  "problemVideoLink": "https://www.youtube.com/embed/bUSaenttI24?end=132&rel=0",
  "solutionVideolink": "https://www.youtube.com/embed/bUSaenttI24?start=132&rel=0&loop=1&playlist=bUSaenttI24",
  "codes": {
    "java": ""
  }
}