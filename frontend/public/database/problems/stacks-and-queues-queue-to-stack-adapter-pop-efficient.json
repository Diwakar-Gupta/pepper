{
  "name": "Queue To Stack Adapter - Pop Efficient",
  "slug": "stacks-and-queues-queue-to-stack-adapter-pop-efficient",
  "description": "1. You are required to complete the code of our QueueToStackAdapter class. \n2. As data members you've two queues available - mainQ and helperQ. mainQ is to contain data and helperQ is to assist in operations. (This is cryptic - take hint from video)\n3. Here is the list of functions that you are supposed to complete\n     3.1. push -> Should accept new data in LIFO manner.\n     3.2. pop -> Should remove and return data in LIFO manner. If not available, print \n     \"Stack underflow\" and return -1.\n    3.3. top -> Should return data in LIFO manner. If not available, print \"Stack \n    underflow\" and return -1.\n    3.4. size -> Should return the number of elements available in the stack.\n4. Input and Output is managed for you.\n\nNote -> pop, top and size should work in constant time. push should work in linear time.\n\n### Input Format\n```\nInput is managed for you\n```\n\n### Output Format\n```\nOutput is managed for you\n```\n\n### Constraints\n```\nNote -> pop, top and size should work in constant time. push should work in linear time.\n```\n\n### Sample Input\n```\npush 10\npush 20\npush 5\npush 8\npush 2\npush 4\npush 11\ntop\nsize\npop\ntop\nsize\npop\ntop\nsize\npop\ntop\nsize\npop\ntop\nsize\npop\ntop\nsize\npop\ntop\nsize\npop\nquit\n```\n\n### Sample Output\n```\n11\n7\n11\n4\n6\n4\n2\n5\n2\n8\n4\n8\n5\n3\n5\n20\n2\n20\n10\n1\n10\n```",
  "externalPlatforms": [],
  "problemVideoLink": "https://www.youtube.com/embed/4uHZxkUw-F4?rel=0",
  "solutionVideolink": "https://www.youtube.com/embed/bJpPuLMiUgA?rel=0&loop=1&playlist=bJpPuLMiUgA",
  "codes": {
    "java": "import java.io.*;\nimport java.util.*;\npublic class Main {\n  public static class \nQueueToStackAdapter {\n    Queue<Integer> mainQ;\n    Queue<Integer> helperQ;\n    public \nQueueToStackAdapter() {\n      mainQ = new ArrayDeque\n<>();\n      helperQ = new \nArrayDeque<>();\n    }\n    int size() {\n      // write your code \nhere\n    }\n    void push(int val) {\n      // write your code \nhere\n    }\n    int pop() {\n      // write your code \nhere\n    }\n    int top() {\n      // write your code \nhere"
  }
}