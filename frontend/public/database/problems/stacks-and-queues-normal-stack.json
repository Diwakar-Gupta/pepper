{
  "name": "Normal Stack",
  "slug": "stacks-and-queues-normal-stack",
  "description": "1. You are required to complete the code of our CustomStack class. The class should mimic the behaviour of java.util.Stack class and implement LIFO semantic.\n2. Here is the list of functions that you are supposed to complete\n   2.1. push -> Should accept new data if there is space available in the underlying \n   array or print \"Stack overflow\" otherwise.\n   2.2. pop -> Should remove and return last data if available or print \"Stack \n   underflow\" otherwise and return -1.\n   2.3. top -> Should return last data if available or print \"Stack underflow\" \n   otherwise and return -1.\n   2.4. size -> Should return the number of elements available in the stack.\n   2.5. display -> Should print the elements of stack in LIFO manner (space- \n   separated) ending with a line-break.\n3. Input and Output is managed for you.\n\n### Input Format\n```\nInput is managed for you\n```\n\n### Output Format\n```\nOutput is managed for you\n```\n\n### Constraints\n```\nNone\n```\n\n### Sample Input\n```\n5\npush 10\ndisplay\npush 20\ndisplay\npush 30\ndisplay\npush 40\ndisplay\npush 50\ndisplay\npush 60\ndisplay\ntop\npop\ndisplay\ntop\npop\ndisplay\ntop\npop\ndisplay\ntop\npop\ndisplay\ntop\npop\ndisplay\ntop\npop\nquit\n```\n\n### Sample Output\n```\n10 \n20 10 \n30 20 10 \n40 30 20 10 \n50 40 30 20 10 \nStack overflow\n50 40 30 20 10 \n50\n50\n40 30 20 10 \n40\n40\n30 20 10 \n30\n30\n20 10 \n20\n20\n10 \n10\n10\n\nStack underflow\nStack underflow\n```",
  "externalPlatforms": [],
  "problemVideoLink": "https://www.youtube.com/embed/54al81dc_EE?rel=0",
  "solutionVideolink": "https://www.youtube.com/embed/vp9BhLtT7CY?rel=0&loop=1&playlist=vp9BhLtT7CY",
  "codes": {
    "java": ""
  }
}