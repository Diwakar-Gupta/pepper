{
  "name": "Stack To Queue Adapter - Remove Efficient",
  "slug": "stacks-and-queues-stack-to-queue-adapter-remove-efficient",
  "description": "1. You are required to complete the code of our StackToQueueAdapter class. The class should mimic the behaviour of a Queue and implement FIFO semantic.\n2. Here is the list of functions that are written in the class\n    2.1. add -> Accepts new data if there is space available in the underlying array or \n    print \"Queue overflow\" otherwise.\n    2.2. remove -> Removes and returns value according to FIFO, if available or print \n    \"Queue underflow\" otherwise and return -1.\n    2.3. peek -> Returns value according to FIFO, if available or print \"Queue \n    underflow\" otherwise and return -1.\n    2.4. size -> Returns the number of elements available in the queue.\n3. Input and Output is managed for you.\n\n### Input Format\n```\nInput is managed for you\n```\n\n### Output Format\n```\nOutput is managed for you\n```\n\n### Constraints\n```\nNote -> remove, peek and size should work in constant time. add should work in linear time.\n```\n\n### Sample Input\n```\nadd 10\nadd 20\nadd 30\nadd 40\nadd 50\nremove\nremove\nadd 60\nadd 70\npeek\nremove\npeek\nremove\npeek\nremove\npeek\nremove\npeek\nremove\npeek\nremove\nquit\n```\n\n### Sample Output\n```\n10\n20\n30\n30\n40\n40\n50\n50\n60\n60\n70\n70\nQueue underflow\nQueue underflow\n```",
  "externalPlatforms": [],
  "problemVideoLink": "https://www.youtube.com/embed/tL1G0YX0ZZM?rel=0",
  "solutionVideolink": "https://www.youtube.com/embed/J8EejK8zvw8?rel=0&loop=1&playlist=J8EejK8zvw8",
  "codes": {
    "java": "import java.io.*;\nimport java.util.*;\npublic class Main {\n  public static class \nStackToQueueAdapter {\n    Stack<Integer> mainS;\n    Stack<Integer> helperS;\n    public \nStackToQueueAdapter() {\n      mainS = new Stack<>();\n      helperS = new Stack\n<>();\n    }\n    int size() {\n      // write your code \nhere\n    }\n    void add(int val) {\n      // write your code \nhere\n    }\n    int remove() {\n      // write your code \nhere\n    }\n    int peek() {\n      // write your code \nhere\n    }"
  }
}