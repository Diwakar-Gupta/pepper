{
  "name": "Two Stacks In An Array",
  "slug": "stacks-and-queues-two-stacks-in-an-array",
  "description": "1. You are required to complete the code of our TwoStack class. The class should implement LIFO behaviours for two stacks in the same array.\n2. Here is the list of functions that you are supposed to complete\n    2.1. push1, push2 -> Should accept new data for appropriate stack if there is \n    space available in the underlying array or print \"Stack overflow\" otherwise.\n    2.2. pop1, po2 -> Should remove and return data from appropriate stack if \n    available or print \"Stack underflow\" otherwise and return -1.\n    2.3. top1, top2 -> Should return data from appropriate stack if available or print \n    \"Stack underflow\" otherwise and return -1.\n    2.4. size1, size2 -> Should return the number of elements available in appropriate \n     stack.\n3. Input and Output is managed for you.\n\n### Input Format\n```\nInput is managed for you\n```\n\n### Output Format\n```\nOutput is managed for you\n```\n\n### Constraints\n```\n1. All fns should be constant in time.\n2. Memory should be optimally used i.e. one of the stacks can use more elements in array but overflow should not happen before whole array is used.\n```\n\n### Sample Input\n```\n5\npush1 10\npush1 20\npush2 30\npush2 40\npush2 50\npush1 60\ntop1\npop1\ntop1\npop1\ntop2\npop2\ntop2\npop2\ntop1\npop1\ntop2\npop2\nquit\n```\n\n### Sample Output\n```\nStack overflow\n20\n20\n10\n10\n50\n50\n40\n40\nStack underflow\nStack underflow\n30\n30\n```",
  "externalPlatforms": [],
  "problemVideoLink": "https://www.youtube.com/embed/HK9ZRogP_98?rel=0",
  "solutionVideolink": "https://www.youtube.com/embed/S4mBBDfvWCE?rel=0&loop=1&playlist=S4mBBDfvWCE",
  "codes": {
    "java": "import java.io.*;\nimport java.util.*;\npublic class Main {\n  public static class \nTwoStack {\n    int[] data;\n    int tos1;\n    int tos2;\n    public TwoStack(int cap) \n{\n      // write your code \nhere\n    }\n    int size1() {\n      // write your code \nhere\n    }\n    int size2() {\n      // write your code \nhere\n    }\n    void push1(int val) {\n      // write your code \nhere\n    }\n    void push2(int val) {\n      // write your code \nhere\n    }"
  }
}